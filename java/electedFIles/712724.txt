import java.io.IOException;
import java.io.InputStream;
import java.text.DecimalFormat;
import java.util.NoSuchElementException;

public class Main {
	public static void main(String[] args) {
		FS reader = new FS();
		int N = (int)reader.nextLong();
		int Q = (int)reader.nextLong();
		int[] X = new int[N];
		int[] R = new int[N];
		int[] H = new int[N];
		int[] A = new int[Q];
		int[] B = new int[Q];
		for (int i=0; i<N; i++) {
			X[i] = (int)reader.nextLong();
			R[i] = (int)reader.nextLong();
			H[i] = (int)reader.nextLong();
		}
		for (int i=0; i<Q; i++) {
			A[i] = (int)reader.nextLong();
			B[i] = (int)reader.nextLong();
		}

		solver(N, Q, X, R, H, A, B);
	}

	public static void solver(int N, int Q, int[] X,int[] R,int[] H,int[] A,int[] B) {
		double[] V = new double[20000];
		for (int i=0; i<20000; i++) {
			V[i] = 0.0;
		}
		// input volume data
		for (int i=0; i<N; i++) {
			for (int k=1; k<=H[i]; k++) {
				V[X[i]+H[i]-k] += Math.pow((double)R[i], 2) * Math.PI / 3 * (double)H[i] * (Math.pow(k, 3)-Math.pow(k-1, 3)) / Math.pow(H[i], 3);
			}
		}

		DecimalFormat df = new DecimalFormat("#.#######");

		// answer
		for (int i=0; i<Q; i++) {
			double answer = 0.0;
			for (int k=A[i]; k<B[i]; k++) {
				answer += V[k];
			}
			System.out.println(df.format(answer));
		}
		return;
	}

	// Read Class
	static class FS {
		private final InputStream in = System.in;
		private final byte[] buffer = new byte[1024];
		private int ptr = 0;
		private int buflen = 0;
		private boolean hasNextByte() {
			if (ptr < buflen) {
				return true;
			} else {
				ptr = 0;
				try {
					buflen = in.read(buffer);
				} catch (IOException e) {
					e.printStackTrace();
				}
				if (buflen <= 0) {
					return false;
				}
			}
			return true;
		}

		private int readByte() { return hasNextByte() ? buffer[ptr++] : -1;}
		private boolean isPrintableChar(int c) {return 33 <= c && c <= 126;}
		private void skipUnprintable() {while(hasNextByte() && !isPrintableChar(buffer[ptr])) ptr++;}

		public boolean hasNext() { skipUnprintable(); return hasNextByte();}
		public String next() {
			if (!hasNext()) throw new NoSuchElementException();
			StringBuilder sb = new StringBuilder();
			int b = readByte();
			while(isPrintableChar(b)) {
				sb.appendCodePoint(b);
				b = readByte();
			}
			return sb.toString();
		}
		public long nextLong() {
			if (!hasNext()) throw new NoSuchElementException();
			long n = 0;
			boolean minus = false;
			int b = readByte();
			if (b == '-') {
				minus = true;
				b = readByte();
			}
			if (b < '0' || '9' < b) {
				throw new NumberFormatException();
			}
			while(true) {
				if ('0' <= b && b <= '9') {
					n *= 10;
					n += b - '0';
				} else if(b == -1 || !isPrintableChar(b)) {
					return minus ? -n : n;
				} else {
					throw new NumberFormatException();
				}
				b = readByte();
			}
		}
	}
}